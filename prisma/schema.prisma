generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model event_listeners {
  user                   String
  socket_url             String
  created_at             DateTime  @default(now())
  expires                DateTime?
  back_pressure_snapshot Int       @default(autoincrement())
  port                   Int?
  jwt_token              String    @id
  users                  users     @relation(fields: [user], references: [email])
}

model event_types {
  enumKey   String     @id
  enumValue String
  on_event  on_event[]
}

model expect_behavior {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id                            String       @id @default(dbgenerated())
  shortname                     String       @unique
  language                      String
  detailed_description          String
  gpg_public_key                String
  gpg_signature                 String
  s3_download_uri               String?      @unique
  npm_uri                       String?      @unique
  maven_uri                     String?      @unique
  gradle_uri                    String?      @unique
  github_release_uri            String?      @unique
  github_repo_uri               String       @unique
  encrypted_stack_file_location String       @unique
  business_requirement          String?
  business_reason               String?
  stack_standard_certified      Boolean
  for_reason                    for_reason?  @relation(fields: [business_reason], references: [shortname])
  for_language                  for_language @relation(fields: [language], references: [title])
}

model for_language {
  id                            Int               @id @default(autoincrement())
  title                         String            @unique
  created_at                    DateTime          @default(now())
  description                   String
  sdk_uri                       String
  package_manager_uri           String
  package_manager_download_uri  String
  installation_instructions_uri String
  cli_documentation_uri         String
  cli_plugin_uri                String
  sandbox_uri                   String
  github_uri                    String
  enterprise_support_uri        String
  relevant_apis                 String
  lang                          String?
  expect_behavior               expect_behavior[]
  on_condition                  on_condition[]
}

model for_reason {
  id               Int               @default(autoincrement())
  title            String
  created_at       DateTime          @default(now())
  shortname        String            @unique
  dependencies     Json
  category         String
  semantic_version String            @unique
  other_version    String
  expect_behavior  expect_behavior[]

  @@id([id, shortname])
}

model for_requirement {
  id         Int      @default(autoincrement())
  title      String
  created_at DateTime @default(now())
  shortname  String   @unique

  @@id([id, shortname])
}

model on_behavior_exec {
  execKey   String @id
  execValue String
}

model on_condition {
  id                 Int          @id @default(autoincrement())
  created_at         DateTime     @default(now())
  required_condition String
  language           String
  run_behavior       String?
  event_graph        Json?
  for_language       for_language @relation(fields: [language], references: [title])
}

model on_event {
  id          Int         @id @default(autoincrement())
  title       String      @unique @default("document.getElementById(\"form\").addEventListener(\"submit\", onSubmitHook ); ()({ function onSubmitHook() {} )}")
  type        String
  created_at  DateTime?   @default(now())
  updated_at  DateTime?   @default(now())
  fdsl_uuid   String?
  event_types event_types @relation(fields: [type], references: [enumKey])
}

model users {
  id              Int               @id @default(autoincrement())
  firstname       String
  lastname        String
  fullname        String
  email           String            @unique
  event_listeners event_listeners[]
}
